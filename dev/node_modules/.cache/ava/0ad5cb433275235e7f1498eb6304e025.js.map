{"version":3,"sources":["/home/mael/Documents/projects/incidents/dev/test/index.js"],"names":["t","resp","getResponse","true","length","console","log","result","body","connection","close","get","_id","undefined","Math","random","getLocs","form","kind","locationId","happenedAt","myPost","post","incidents","archivePost"],"mappings":"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","file":"/home/mael/Documents/projects/incidents/dev/test/index.js","sourcesContent":["import test from \"ava\"\nimport http from \"ava-http\"\n\n\n\n\n\n\ntest(\"loca\", async t => {\n\n    var resp = await http.getResponse(\"http://localhost:8000/localities\");\n    t.true(typeof resp === typeof [], \"The response is not an object\");\n    t.true(resp.length >= 1, \"The result must have at least 1 register to test with\");\n\n    console.log(resp)\n\n    var result = resp.resp.body;\n    resp.connection.close()\n\n    //////////////////////////////////\n\n    resp = await http.get(\"http://localhost:8000/localities/\" + resp[0]._id);\n    t.true(typeof resp === typeof {}, \"The response is not an object\");\n    t.true(resp._id !== undefined, \"The response should return an existing locality\");\n\n    resp = await http.get(\"http://localhost:8000/localities/\" + Math.random());\n    t.true(typeof resp === typeof {}, \"The response is not an object\");\n    t.true(resp._id === undefined, \"The response should return a non existing locality\");\n});\n\n\ntest(\"/POST incidents/ incidents/${incidentId}/archive/\", async t => {\n\n    const getLocs = await http.get(\"http://localhost:8000/localities\");\n    t.true(typeof getLocs === typeof [], \"The response is not an object\");\n    t.true(getLocs.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const form = { kind: \"robbery\", locationId: getLocs[0]._id, happenedAt: \"2018-02-07\" };\n    const myPost = await http.post(\"http://localhost:8000/incidents\", { form });\n    t.true(myPost === true, \"Response must be true\");\n\n    //////////////////////////////////\n\n    const incidents = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof incidents === typeof [], \"The response is not an object\");\n    t.true(incidents.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const archivePost = await http.post(`http://localhost:8000/incidents/${incidents[incidents.length - 1]._id}/archive/`);\n    t.true(archivePost === true, \"Response must be true\");\n})\n\n\ntest(\"/GET incidents/\", async t => {\n\n    var resp = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof resp === typeof [], \"The response is not an object\");\n});\n\n"]}