{"version":3,"sources":["/home/mael/Documents/projects/incidents/dev/test/index.js"],"names":["t","resp","get","true","length","localityId","_id","undefined","waitForLocality"],"mappings":";;AAAA;;AACA;;;;;;;AAKA,kBAAK,gBAAL,EAAuB,MAAMA,CAAN,IAAW;AAAA;;AAE9B,MAAIC,OAAO,MAAM,iBAAKC,GAAL,CAAS,iCAAT,CAAjB;AAEAF,IAAEG,IAAF,uBAAO,kBAAOF,IAAP,qCAAgB,kBAAO,EAAP,+BAAhB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,+BAAlC;AACH,CALD;AAQA,kBAAK,iBAAL,EAAwB,MAAMD,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;;AAE/B,MAAIC,OAAO,MAAM,iBAAKC,GAAL,CAAS,kCAAT,CAAjB;AAEAF,IAAEG,IAAF,yBAAO,mBAAOF,IAAP,sCAAgB,mBAAO,EAAP,+BAAhB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,+BAAlC;AAEAD,IAAEG,IAAF,yBAAO,yDAAKC,MAAL,yBAAe,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAyB,uDAAzB,EAN+B,CAQ/B;;AAEA,MAAIC,aAAaJ,KAAK,CAAL,EAAQK,GAAzB;AAEAL,SAAO,MAAM,iBAAKC,GAAL,CAAS,sCAAsCG,UAA/C,CAAb;AAEAL,IAAEG,IAAF,yBAAO,mBAAOF,IAAP,sCAAgB,mBAAO,EAAP,+BAAhB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,+BAAlC;AAEAD,IAAEG,IAAF,yBAAO,yDAAKG,GAAL,sCAAaC,SAAb,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,iDAA/B;AAEH,CAlBD;;AAqBA,IAAIC,kBAAmBH,UAAD,IAAgB,CAErC,CAFD,C,CAKA;AACA;AAEA;AAEA;AAEA;AACA;AACA","file":"/home/mael/Documents/projects/incidents/dev/test/index.js","sourcesContent":["import test from \"ava\"\nimport http from \"ava-http\"\n\n\n\n\ntest(\"/GET incidents\", async t => {\n\n    var resp = await http.get(\"http://localhost:8000/incidents\");\n    \n    t.true(typeof resp === typeof [], \"The response is not an object\");\n});\n\n\ntest(\"/GET localities\", async t => {\n\n    var resp = await http.get(\"http://localhost:8000/localities\");\n        \n    t.true(typeof resp === typeof [], \"The response is not an object\");\n\n    t.true(resp.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    var localityId = resp[0]._id;\n\n    resp = await http.get(\"http://localhost:8000/localities/\" + localityId);\n    \n    t.true(typeof resp === typeof {}, \"The response is not an object\");\n\n    t.true(resp._id !== undefined, \"The response should return an existing locality\");\n\n});\n\n\nvar waitForLocality = (localityId) => {\n\n}\n\n\n// test(\"/POST incidents\", async t => {\n//     const resp = await http.post(\"http://localhost:8000/incidents\", { kind: \"robbery\",  });\n\n//     console.log(resp)\n\n//     t.true(resp === false, \"Response must be false since no parameter was sent\");\n\n//     // t.true(resp === 200);\n//     // t.true(resp === false, \"The response should've been \\\"false\\\" because no parameters were sent\");\n// })\n\n"]}