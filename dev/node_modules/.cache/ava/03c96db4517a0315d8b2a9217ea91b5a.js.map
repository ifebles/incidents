{"version":3,"sources":["/home/mael/Documents/projects/incidents/dev/test/index.js"],"names":["t","localities","get","true","length","failLocality","Math","random","_id","undefined","getLocs","form","kind","locationId","happenedAt","myPost","post","incidents","archivePost","resp"],"mappings":";;AAAA;;AACA;;;;;;;AAOA,kBAAK,+CAAL,EAAsD,MAAMA,CAAN,IAAW;AAAA;AAAA;AAAA;;AAE7D,QAAMC,aAAa,MAAM,iBAAKC,GAAL,CAAS,kCAAT,CAAzB,CAF6D,CAG7D;;AACAF,IAAEG,IAAF,uBAAO,6DAAWC,MAAX,yBAAqB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,uDAA/B,EAJ6D,CAM7D;AAEA;AACA;AACA;AAEA;;AAEA,QAAMC,eAAe,MAAM,iBAAKH,GAAL,CAAS,sCAAsCI,KAAKC,MAAL,EAA/C,CAA3B;AACAP,IAAEG,IAAF,yBAAO,mBAAOE,YAAP,sCAAwB,mBAAO,EAAP,+BAAxB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0C,+BAA1C;AACAL,IAAEG,IAAF,yBAAO,iEAAaK,GAAb,sCAAqBC,SAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuC,oDAAvC;AACH,CAjBD;AAoBA,kBAAK,mDAAL,EAA0D,MAAMT,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEjE,QAAMU,UAAU,MAAM,iBAAKR,GAAL,CAAS,kCAAT,CAAtB;AACAF,IAAEG,IAAF,yBAAO,mBAAOO,OAAP,sCAAmB,mBAAO,EAAP,+BAAnB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAV,IAAEG,IAAF,yBAAO,4DAAQC,MAAR,yBAAkB,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA4B,uDAA5B,EAJiE,CAMjE;;AAEA,QAAMO,OAAO;AAAEC,UAAM,SAAR;AAAmBC,gBAAYH,QAAQ,CAAR,EAAWF,GAA1C;AAA+CM,gBAAY;AAA3D,GAAb;AACA,QAAMC,SAAS,MAAM,iBAAKC,IAAL,CAAU,iCAAV,EAA6C;AAAEL;AAAF,GAA7C,CAArB;AACAX,IAAEG,IAAF,yBAAO,4CAAW,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAwB,uBAAxB,EAViE,CAYjE;;AAEA,QAAMc,YAAY,MAAM,iBAAKf,GAAL,CAAS,iCAAT,CAAxB;AACAF,IAAEG,IAAF,yBAAO,mBAAOc,SAAP,sCAAqB,mBAAO,EAAP,+BAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuC,+BAAvC;AACAjB,IAAEG,IAAF,yBAAO,8DAAUC,MAAV,yBAAoB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA8B,uDAA9B,EAhBiE,CAkBjE;;AAEA,QAAMc,cAAc,MAAM,iBAAKF,IAAL,CAAW,mCAAkCC,UAAUA,UAAUb,MAAV,GAAmB,CAA7B,EAAgCI,GAAI,WAAjF,CAA1B;AACAR,IAAEG,IAAF,yBAAO,iDAAgB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA6B,uBAA7B;AACH,CAtBD;AAyBA,kBAAK,iBAAL,EAAwB,MAAMH,CAAN,IAAW;AAAA;;AAE/B,MAAImB,OAAO,MAAM,iBAAKjB,GAAL,CAAS,iCAAT,CAAjB;AACAF,IAAEG,IAAF,2BAAO,oBAAOgB,IAAP,uCAAgB,oBAAO,EAAP,+BAAhB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,+BAAlC;AACH,CAJD","file":"/home/mael/Documents/projects/incidents/dev/test/index.js","sourcesContent":["import test from \"ava\"\nimport http from \"ava-http\"\n\n\n\n\n\n\ntest(\"/GET localities/ and localities/${localityId}\", async t => {\n\n    const localities = await http.get(\"http://localhost:8000/localities\");\n    // t.true(typeof localities === typeof [], \"The response is not an object\");\n    t.true(localities.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    // const locality = await http.get(\"http://localhost:8000/localities/\" + localities[localities.length - 1]._id);\n    // t.true(typeof locality === typeof {}, \"The response is not an object\");\n    // t.true(locality._id !== undefined, \"The response should return an existing locality\");\n\n    // //////////////////////////////////\n\n    const failLocality = await http.get(\"http://localhost:8000/localities/\" + Math.random());\n    t.true(typeof failLocality === typeof {}, \"The response is not an object\");\n    t.true(failLocality._id === undefined, \"The response should return a non existing locality\");\n});\n\n\ntest(\"/POST incidents/ incidents/${incidentId}/archive/\", async t => {\n\n    const getLocs = await http.get(\"http://localhost:8000/localities\");\n    t.true(typeof getLocs === typeof [], \"The response is not an object\");\n    t.true(getLocs.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const form = { kind: \"robbery\", locationId: getLocs[0]._id, happenedAt: \"2018-02-07\" };\n    const myPost = await http.post(\"http://localhost:8000/incidents\", { form });\n    t.true(myPost === true, \"Response must be true\");\n\n    //////////////////////////////////\n\n    const incidents = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof incidents === typeof [], \"The response is not an object\");\n    t.true(incidents.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const archivePost = await http.post(`http://localhost:8000/incidents/${incidents[incidents.length - 1]._id}/archive/`);\n    t.true(archivePost === true, \"Response must be true\");\n})\n\n\ntest(\"/GET incidents/\", async t => {\n\n    var resp = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof resp === typeof [], \"The response is not an object\");\n});\n\n"]}