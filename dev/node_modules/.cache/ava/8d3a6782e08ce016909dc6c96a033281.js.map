{"version":3,"sources":["/home/mael/Documents/projects/incidents/dev/test/index.js"],"names":["t","localities","get","true","length","locality","_id","undefined","failLocality","Math","random","getLocs","form","kind","locationId","happenedAt","myPost","post","incidents","archivePost","resp"],"mappings":"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","file":"/home/mael/Documents/projects/incidents/dev/test/index.js","sourcesContent":["import test from \"ava\"\nimport http from \"ava-http\"\n\n\n\n\n\n\ntest(\"/GET localities/ and localities/${localityId}\", async t => {\n\n    const localities = await http.get(\"http://localhost:8000/localities\");\n    t.true(typeof localities === typeof [], \"The response is not an object\");\n    t.true(localities.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const locality = await http.get(\"http://localhost:8000/localities/\" + localities[localities.length - 1]._id);\n    t.true(typeof locality === typeof {}, \"The response is not an object\");\n    t.true(locality._id !== undefined, \"The response should return an existing locality\");\n\n    //////////////////////////////////\n\n    const failLocality = await http.get(\"http://localhost:8000/localities/\" + Math.random());\n    t.true(typeof failLocality === typeof {}, \"The response is not an object\");\n    t.true(failLocality._id === undefined, \"The response should return a non existing locality\");\n});\n\n\ntest(\"/POST incidents/ incidents/${incidentId}/archive/\", async t => {\n\n    const getLocs = await http.get(\"http://localhost:8000/localities\");\n    t.true(typeof getLocs === typeof [], \"The response is not an object\");\n    t.true(getLocs.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const form = { kind: \"robbery\", locationId: getLocs[0]._id, happenedAt: \"2018-02-07\" };\n    const myPost = await http.post(\"http://localhost:8000/incidents\", { form });\n    t.true(myPost === true, \"Response must be true\");\n\n    //////////////////////////////////\n\n    const incidents = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof incidents === typeof [], \"The response is not an object\");\n    t.true(incidents.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    const archivePost = await http.post(`http://localhost:8000/incidents/${incidents[incidents.length - 1]._id}/archive/`);\n    t.true(archivePost === true, \"Response must be true\");\n})\n\n\ntest(\"/GET incidents/\", async t => {\n\n    var resp = await http.get(\"http://localhost:8000/incidents\");\n    t.true(typeof resp === typeof [], \"The response is not an object\");\n});\n\n"]}