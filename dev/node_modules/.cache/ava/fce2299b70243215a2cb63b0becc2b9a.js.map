{"version":3,"sources":["/home/mael/Documents/projects/incidents/dev/test/index.js"],"names":["t","localities","get","true","length"],"mappings":";;AAAA;;AACA;;;;;;;AAOA,kBAAK,+CAAL,EAAsD,MAAMA,CAAN,IAAW;AAAA;AAAA;;AAE7D,QAAMC,aAAa,MAAM,iBAAKC,GAAL,CAAS,kCAAT,CAAzB;AACAF,IAAEG,IAAF,uBAAO,kBAAOF,UAAP,qCAAsB,kBAAO,EAAP,+BAAtB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAwC,+BAAxC;AACAD,IAAEG,IAAF,yBAAO,+DAAWC,MAAX,yBAAqB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,uDAA/B,EAJ6D,CAM7D;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACH,CAjBD,E,CAoBA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA","file":"/home/mael/Documents/projects/incidents/dev/test/index.js","sourcesContent":["import test from \"ava\"\nimport http from \"ava-http\"\n\n\n\n\n\n\ntest(\"/GET localities/ and localities/${localityId}\", async t => {\n\n    const localities = await http.get(\"http://localhost:8000/localities\");\n    t.true(typeof localities === typeof [], \"The response is not an object\");\n    t.true(localities.length >= 1, \"The result must have at least 1 register to test with\");\n\n    //////////////////////////////////\n\n    // const locality = await http.get(\"http://localhost:8000/localities/\" + localities[localities.length - 1]._id);\n    // t.true(typeof locality === typeof {}, \"The response is not an object\");\n    // t.true(locality._id !== undefined, \"The response should return an existing locality\");\n\n    // //////////////////////////////////\n\n    // const failLocality = await http.get(\"http://localhost:8000/localities/\" + Math.random());\n    // t.true(typeof failLocality === typeof {}, \"The response is not an object\");\n    // t.true(failLocality._id === undefined, \"The response should return a non existing locality\");\n});\n\n\n// test(\"/POST incidents/ incidents/${incidentId}/archive/\", async t => {\n\n//     const getLocs = await http.get(\"http://localhost:8000/localities\");\n//     t.true(typeof getLocs === typeof [], \"The response is not an object\");\n//     t.true(getLocs.length >= 1, \"The result must have at least 1 register to test with\");\n\n//     //////////////////////////////////\n\n//     const form = { kind: \"robbery\", locationId: getLocs[0]._id, happenedAt: \"2018-02-07\" };\n//     const myPost = await http.post(\"http://localhost:8000/incidents\", { form });\n//     t.true(myPost === true, \"Response must be true\");\n\n//     //////////////////////////////////\n\n//     const incidents = await http.get(\"http://localhost:8000/incidents\");\n//     t.true(typeof incidents === typeof [], \"The response is not an object\");\n//     t.true(incidents.length >= 1, \"The result must have at least 1 register to test with\");\n\n//     //////////////////////////////////\n\n//     const archivePost = await http.post(`http://localhost:8000/incidents/${incidents[incidents.length - 1]._id}/archive/`);\n//     t.true(archivePost === true, \"Response must be true\");\n// })\n\n\n// test(\"/GET incidents/\", async t => {\n\n//     var resp = await http.get(\"http://localhost:8000/incidents\");\n//     t.true(typeof resp === typeof [], \"The response is not an object\");\n// });\n\n"]}